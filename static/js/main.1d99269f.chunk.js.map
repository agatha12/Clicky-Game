{"version":3,"sources":["components/Header.js","components/Title.js","components/Footer.js","characters.js","components/ImageCard.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","score","best_score","styles","imgStyle","width","height","margin","Title","id","style","src","alt","React","Component","footerStyle","backgroundColor","top","color","fontSize","Footer","characters","image","ImageCard","state","selected","_this2","this","value","onClick","userChoice","App","unchoosenchars","shuffleArray","array","i","length","j","Math","floor","random","temp","chosenid","undefined","_this","find","element","console","log","setState","newUnchosen","filter","components_Header","components_Title","map","character","components_ImageCard","key","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8KA0BeA,MAvBf,SAAgBC,GAGZ,OAEIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,yBACAF,EAAAC,EAAAC,cAAA,sCACAF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,UACYJ,EAAMK,MADlB,kBACwCL,EAAMM,eCVxDC,EAAQ,CACZC,SAAU,CACRC,MAAO,OACPC,OAAQ,QACRC,OAAQ,WAoBGC,mLAZX,OAEIX,EAAAC,EAAAC,cAAA,WAASU,GAAG,cACZZ,EAAAC,EAAAC,cAAA,OAAKW,MAAOP,EAAOC,SAAUO,IAAI,uBAAuBC,IAAI,WACxDf,EAAAC,EAAAC,cAAA,OAAKU,GAAG,SAAR,eACAZ,EAAAC,EAAAC,cAAA,4FARQc,IAAMC,WCTpBX,EAAS,CACbC,SAAU,CACRC,MAAO,OACPC,OAAQ,QAEVS,YAAa,CACXV,MAAO,OACPW,gBAAiB,OACjBC,IAAK,QACLC,MAAO,QACPZ,OAAQ,QACRa,SAAU,SAoBCC,mLAXX,OAEEvB,EAAAC,EAAAC,cAAA,UAAQW,MAAOP,EAAOY,aACpBlB,EAAAC,EAAAC,cAAA,WADF,eAEcF,EAAAC,EAAAC,cAAA,OAAKW,MAAOP,EAAOC,SAAUQ,IAAI,QAAQD,IAAI,qCAP5CE,IAAMC,WCoCZO,EAxDM,CACjB,CACEZ,GAAI,EACJa,MAAO,0BAET,CACEb,GAAI,EACJa,MAAO,8BAET,CACEb,GAAI,EACJa,MAAO,uBAET,CACEb,GAAI,EACJa,MAAO,gCAET,CACEb,GAAI,EACJa,MAAO,0BAET,CACEb,GAAI,EACJa,MAAO,sBAET,CACEb,GAAI,EACJa,MAAO,yBAET,CACEb,GAAI,EACJa,MAAO,2BAET,CACEb,GAAI,EACJa,MAAO,uBAET,CACEb,GAAI,GACJa,MAAO,sBAET,CACEb,GAAI,GACJa,MAAO,uBAET,CACEb,GAAI,GACJa,MAAO,4BCtBEC,6MAnBbC,MAAQ,CACNC,UAAU,2EAIH,IAAAC,EAAAC,KACP,OAEE9B,EAAAC,EAAAC,cAAA,UAAQ6B,MAAOD,KAAK/B,MAAMa,GAAIoB,QAAS,kBAAMH,EAAK9B,MAAMkC,WAAWJ,EAAK9B,MAAMa,KAAKT,UAAU,YAC3FH,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUW,IAAKgB,KAAK/B,MAAM0B,MAAOV,IAAI,sBAbpCC,IAAMC,WCuFfiB,6MAhFbP,MAAQ,CACNvB,MAAO,EACPC,WAAY,EACZmB,WAAYA,EACZW,eAAgBX,KAIlBY,aAAe,SAAAC,GAEb,IADA,IAAIC,EAAID,EAAME,OAAS,EAChBD,EAAI,EAAGA,IAAK,CACjB,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IACpCM,EAAOP,EAAMC,GACnBD,EAAMC,GAAKD,EAAMG,GACjBH,EAAMG,GAAKI,EAEb,OAAOP,KAITJ,WAAa,SAAAY,GAEX,QAAeC,IADAC,EAAKpB,MAAMQ,eAAea,KAAK,SAAAC,GAAO,OAAIA,EAAQrC,KAAOiC,IAEtEK,QAAQC,IAAIN,GACTE,EAAKpB,MAAMvB,MAAQ2C,EAAKpB,MAAMtB,WAC/B0C,EAAKK,SAAS,CACZhD,MAAO,EACPC,WAAY0C,EAAKpB,MAAMvB,MACvB+B,eAAeX,IAIjBuB,EAAKK,SAAS,CACZhD,MAAO,EACP+B,eAAeX,QAKjB,CACF,IAAM6B,EAAcN,EAAKpB,MAAMQ,eAAemB,OAAO,SAAAL,GAAO,OAAIA,EAAQrC,KAAOiC,IAG/EE,EAAKK,SAAS,CACZhD,MAAO2C,EAAKpB,MAAMvB,MAAM,EACxB+B,eAAgBkB,EAChB7B,WAAYuB,EAAKX,aAAaW,EAAKpB,MAAMH,wFAQtC,IAAAK,EAAAC,KACP,OACE9B,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACqD,EAAD,CACAnD,MAAQ0B,KAAKH,MAAMvB,MACnBC,WAAayB,KAAKH,MAAMtB,aAC1BL,EAAAC,EAAAC,cAACsD,EAAD,MACAxD,EAAAC,EAAAC,cAAA,OAAKU,GAAG,gBAETkB,KAAKH,MAAMH,WAAWiC,IAAI,SAAAC,GAAS,OAClC1D,EAAAC,EAAAC,cAACyD,EAAD,CACAC,IAAKF,EAAU9C,GACfA,GAAI8C,EAAU9C,GACda,MAAOiC,EAAUjC,MACjBQ,WAAYJ,EAAKI,gBAGjBjC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAC2D,EAAD,cA3EY5C,aCIE6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1d99269f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport '../index.css'\r\n\r\nfunction Header(props) {\r\n\r\n\r\n    return (\r\n\r\n        <nav>\r\n            <ul>\r\n                <li>Clicky Game</li>\r\n                <li>Click an image to begin!</li>\r\n                <li className=\"Score\">\r\n                    Score: {props.score} | Best Score: {props.best_score}\r\n\r\n                </li>\r\n            </ul>\r\n\r\n\r\n        </nav>\r\n\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\nimport '../index.css'\r\n\r\nconst styles ={\r\n  imgStyle: {\r\n    width: \"100%\",\r\n    height: \"300px\",\r\n    margin: \"0 auto\"\r\n  }\r\n}\r\n\r\n\r\nclass Title extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n     \r\n        <section id=\"titleimage\">\r\n        <img style={styles.imgStyle} src=\"../images/marvel.jpg\" alt=\"marvel\"></img>\r\n            <div id=\"title\">Clicky Game</div>\r\n            <p>Click on an image to earn points, but dont click on any more than once </p>\r\n        </section>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nexport default Title;","import React from \"react\";\r\nimport '../index.css'\r\n\r\nconst styles = {\r\n  imgStyle: {\r\n    width: \"30px\",\r\n    height: \"30px\"\r\n  },\r\n  footerStyle: {\r\n    width: \"100%\",\r\n    backgroundColor: \"navy\",\r\n    top: \"-1000\",\r\n    color: \"white\",\r\n    height: \"100px\",\r\n    fontSize: \"30px\"\r\n  }\r\n}\r\n\r\n\r\n\r\nclass Footer extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n\r\n      <footer style={styles.footerStyle}>\r\n        <br></br>\r\n        Clicky Game <img style={styles.imgStyle} alt=\"react\" src=\"../images/react-logo.png\" ></img>\r\n      </footer>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;","  const characters = [\r\n    {\r\n      id: 1,\r\n      image: '../images/blackcat.jpg'\r\n    },\r\n    {\r\n      id: 2,\r\n      image: \"../images/blackpanther.jpg\"\r\n    },\r\n    {\r\n      id: 3,\r\n      image: \"../images/blade.jpg\"\r\n    },\r\n    {\r\n      id: 4,\r\n      image: \"../images/captainamerica.jpg\"\r\n    },\r\n    {\r\n      id: 5,\r\n      image: \"../images/deadpool.jpg\"\r\n    },\r\n    {\r\n      id: 6,\r\n      image: \"../images/hulk.jpg\"\r\n    },\r\n    {\r\n      id: 7,\r\n      image: \"../images/ironman.jpg\"\r\n    },\r\n    {\r\n      id: 8,\r\n      image: \"../images/spiderman.jpg\"\r\n    },\r\n    {\r\n      id: 9,\r\n      image: \"../images/storm.jpg\"\r\n    },\r\n    {\r\n      id: 10,\r\n      image: \"../images/thor.jpg\"\r\n    },\r\n    {\r\n      id: 11,\r\n      image: \"../images/venom.jpg\"\r\n    },\r\n    {\r\n      id: 12,\r\n      image: \"../images/wolverine.jpg\"\r\n    }]\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default characters","import React from \"react\";\r\nimport '../index.css'\r\n\r\n\r\nclass ImageCard extends React.Component {\r\n\r\n  state = {\r\n    selected: false\r\n  };\r\n\r\n\r\n  render() {\r\n    return (\r\n\r\n      <button value={this.props.id} onClick={() => this.props.userChoice(this.props.id)} className=\"hvr-grow\">\r\n        <br></br>\r\n\r\n        <img className=\"cardimg\" src={this.props.image} alt=\"character\"></img>\r\n\r\n      </button>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImageCard;\r\n\r\n","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport Title from './components/Title';\nimport Footer from './components/Footer';\nimport characters from \"./characters\";\nimport ImageCard from \"./components/ImageCard\"\n\n\nclass App extends Component {\n\n\n  state = {\n    score: 0,\n    best_score: 0,\n    characters: characters,\n    unchoosenchars: characters\n  };\n\n\n  shuffleArray = array => {\n    let i = array.length - 1;\n    for (; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return array;\n  }\n\n\n  userChoice = chosenid => {\n    const answer = this.state.unchoosenchars.find(element => element.id === chosenid);\n    if( answer === undefined){\n      console.log(chosenid)\n      if(this.state.score > this.state.best_score){\n        this.setState({\n          score: 0,\n          best_score: this.state.score,\n          unchoosenchars:characters\n        })\n      }\n      else{\n        this.setState({\n          score: 0,\n          unchoosenchars:characters\n        })\n      }\n      \n    }\n    else{\n      const newUnchosen = this.state.unchoosenchars.filter(element => element.id !== chosenid)\n\n      \n      this.setState({\n        score: this.state.score+1,\n        unchoosenchars: newUnchosen, \n        characters: this.shuffleArray(this.state.characters)\n        \n      })\n    }\n  }\n\n\n  \n  render() {\n    return (\n      <div>\n        <Header \n        score= {this.state.score}\n        best_score= {this.state.best_score} />\n      <Title />\n      <div id=\"characterdiv\">\n    \n    {this.state.characters.map(character => (\n      <ImageCard\n      key={character.id}\n      id={character.id}\n      image={character.image}\n      userChoice={this.userChoice}\n    />  ))}    \n      </div>\n      <br></br>\n      <Footer />\n      </div>\n      \n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import blackcat from '../public/images/blackcat.jpg'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}